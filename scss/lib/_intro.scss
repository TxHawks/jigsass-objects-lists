// *************************************
//
// # jigsass-objects-grid Intro
// -> Introduction doclets
//
// *************************************

@charset 'UTF-8';

// A mixin to create variable scope
@mixin _jigsass-grid-doclet-var-scope {
  @content;
}


// -------------------------------------
// Intoduction
// -------------------------------------
@include _jigsass-grid-doclet-var-scope {
  $_ns: if($jigsass-namespace == '', '', #{$jigsass-namespace}-);

  // stylelint-disable
/* ---
section: Lists
title: Introduction
order: -10
---

JigSass Lists is a collection of unopinionated, unstyled, ui abstractions for displaying lists.

**[GitHub page](https://txhawks.github.io/jigsass-objects-lists)**


## Installation

Using npm:

```sh
npm i -S jigsass-objects-lists
```


## Usage

First, you need to import JigSass Lists into your stylesheet:
```scss
@import 'path/to/jigsass-objects-lists/scss/index';
```

And optionally [reconfigure](https://tinyurl.com/lists-config) the defaults to your liking.

JigSass Lists provides the following list abstractions:

  - [Bare list](https://txhawks.github.io/jigsass-objects-lists/#bare-lists): Unstyled lists.
  - [Inline list](https://txhawks.github.io/jigsass-objects-lists/#inline-lists): Inlined list items,
    placed side by side instead of stacked one on top of another
  - [Delimited inline list](https://txhawks.github.io/jigsass-objects-lists/#delimited-inline-lists):
    An inline list, in which items are delimited by a configurable string.
  - Split inline list: Push the [first](https://tinyurl.com/split-first) or
    [last](https://tinyurl.com/split-last) list item away from the other items, to the edge of the container
  - [Divided list](https://txhawks.github.io/jigsass-objects-lists/#divided-lists):
    A vertically stacked list of items divided by horizontal rules.

Like all other JigSass modules, JigSass List does not automatically generate any CSS when imported.
In order to use its classes, you would have to first explicitly indicate your intention to use
them by enabling their generation in the associated [configurations map](#css-output), Leaving
us only with CSS we need.

All JigSass List classes are responsive using [JigSass MQ](https://txhawks.github.io/jigsass-tools-mq/)
and the breakpoints defined in
`[$jigsass-breakpoints](https://txhawks.github.io/jigsass-tools-mq/#variable-jigsass-breakpoints)`.

Based enabled selectors in the [configuration map](#css-output), responsive modifiers are
generated according to the following logic:

```scss
.o-<list-abstraction>--modifier[-[-from-{breakpoint-name}][-until-{breakpoint-name}][-misc-{breakpoint-name}]]
```

So, assuming the `medium`, `large` and `landscape` breakpoints are defined in `$jigsass-breakpoints`
as `600px`, `1024px` and `(orientation: landscape)` respectively,

```scss
$jigsass-list-inline-conf: (
  no-breakpoint: (
    split-first: true,
  ),
  until-medium: (
    split-first: true,
  ),
  from-large-when-landscape: (
    split-first: true,
  ),
)
```

will generate the following classes:
  - `.o-inline-list--split-first`, which is not limited to any media-query.
  - `.o-inline-list--split-first--until-medium`, which will be in effect at
    `(max-width: 37.49em)` and will override styles in the default class
    until that point.
  - `.o-inline-list--split-first--from-large-when-landscape`, which will go
    into effect at `(min-width: 64em) and (orientation: landscape)` and
    will override styles in the default class under these  conditions.

**License:** MIT
*/
  // stylelint-enable
}
